<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Bit side of life</title>
        <link>https://blog.bitside.pl/posts/</link>
        <description>Recent content in Posts on Bit side of life</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 30 Oct 2022 14:57:00 +0100</lastBuildDate>
        <atom:link href="https://blog.bitside.pl/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>HugSQLx - SQL queries turned into Rust functions</title>
            <link>https://blog.bitside.pl/posts/hugsqlx/</link>
            <pubDate>Sun, 30 Oct 2022 14:57:00 +0100</pubDate>
            
            <guid>https://blog.bitside.pl/posts/hugsqlx/</guid>
            <description>Clojure world is lucky to have HugSQL &amp;amp; conman - 2 brilliant libraries which make daily work with SQLs a real pleasure. HugSql decouples queries from the code, so they do not interfere with content of .clj files, and conman transforms (interns) queries into plain clojure functions. Functions created this way are quite smart - underlaying magic connects to postgres, sqlite or whatever DB keeps your data (and is supported by JDBC) and runs defined query with provided function arguments.</description>
            <content type="html"><![CDATA[<p>Clojure world is lucky to have <a href="https://www.hugsql.org/">HugSQL</a> &amp; <a href="https://github.com/luminus-framework/conman">conman</a> - 2 brilliant libraries which make daily work with SQLs a real pleasure. HugSql decouples queries from the code, so they do not interfere with content of .clj files, and conman transforms (interns) queries into plain clojure functions. Functions created this way are quite smart - underlaying magic connects to postgres, sqlite or whatever DB keeps your data (and is supported by JDBC) and runs defined query with provided function arguments.</p>
<p>Simple, yet so effective&hellip;</p>
<p>Can we have something simmilar in Rust?</p>
<p>Seems like we can.</p>
<img src="/images/hugsqlx.png">
<h2 id="motivation">Motivation</h2>
<p>There are 3 main points where couple <code>(hugsql, conman)</code> really shines when dealing with SQLs:</p>
<ul>
<li>queries separated from the code - that brings proper formatting, syntax highlighting and better documentation (readable comments) out of the box. Your IDE is way happier to edit .sql file rather than SQLs inside rust source.</li>
<li>named queries - query becomes easier to identify. Easier to indentify in a code, easier to deduce in logs when one looks for query that just blown up production.</li>
<li>queries as documented functions - better way to understand author&rsquo;s intention - what the query does in summary, what to expect in result?</li>
</ul>
<p>Last but not least - queries turned into functions enable auto-completion and quick doc view out of the box (if you&rsquo;re lucky enough with your LSP)</p>
<h2 id="solution--poc">Solution (PoC)</h2>
<p><a href="https://github.com/mbuczko/hugsqlx">HugSqlx</a> is still kind of proof-of-concept, doing its best to materialize these ideas. Although crate is at its newborn stage, it should be quite functional. Standing on the shoulders of awesome <a href="https://github.com/launchbadge/sqlx">SQLx</a> it implements query-as-a-function concept for 3 major databases: postgres, sqlite and mysql. From a technical point of view, entire logic comes down to a simple (more or less..) code transformation which generates a static trait functions for your struct.</p>
<p>First results seem to be promising. I de-cluttered my sources, enjoy LSP happily providing me queries names via auto-completion. And, most importantly, I learned a lot about <a href="https://doc.rust-lang.org/reference/procedural-macros.html">procedural macros</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Focus Mode</title>
            <link>https://blog.bitside.pl/posts/focus-mode/</link>
            <pubDate>Sun, 16 Oct 2016 17:16:00 +0200</pubDate>
            
            <guid>https://blog.bitside.pl/posts/focus-mode/</guid>
            <description>Focus is one of those additions which turns Emacs usage into real joy and makes programmer’s life happier.
Having to look at tons of code 8 hrs per day might become a bit painful. Readable font is often first choice to improve this situation but it doesn’t help much when one needs to focus on concrete block of code. This is where Focus comes to the rescue - it dims text outside the function pointed by cursor and visually brings that code block at user’s attention.</description>
            <content type="html"><![CDATA[<p><a href="https://github.com/larstvei/Focus">Focus</a> is one of those additions which turns Emacs usage into real joy and makes programmer’s life happier.</p>
<p>Having to look at tons of code 8 hrs per day might become a bit painful. <a href="https://github.com/tonsky/FiraCode">Readable font</a> is often first choice to improve this situation but it doesn’t help much when one needs to focus on concrete block of code. This is where Focus comes to the rescue - it dims text outside the function pointed by cursor and visually brings that code block at user’s attention.</p>
<p>Try it out and keep calm while watching your code.</p>
]]></content>
        </item>
        
        <item>
            <title>Boot-ize your project</title>
            <link>https://blog.bitside.pl/posts/bootize-your-project/</link>
            <pubDate>Sun, 09 Oct 2016 13:40:00 +0200</pubDate>
            
            <guid>https://blog.bitside.pl/posts/bootize-your-project/</guid>
            <description>Maven or gradle? Grunt or gulp? Leiningen or boot…?
It doesn’t matter whether you’re a front- or back-end dev, sooner or later you have to complete your toolbox and choose a right hammer for the right nail. The problem is, all these tools in our ever changing programming world rotate so fast and details between them become so subtle that you’re barely able to check all of them out, understand the philosophy behind and take a reasonable decision.</description>
            <content type="html"><![CDATA[<p>Maven or gradle? Grunt or gulp? Leiningen or boot…?</p>
<p>It doesn’t matter whether you’re a front- or back-end dev, sooner or later you have to complete your toolbox and choose a right hammer for the right nail. The problem is, all these tools in our ever changing programming world rotate so fast and details between them become so subtle that you’re barely able to check all of them out, understand the philosophy behind and take a reasonable decision. In particular it’s noticeable in javascript world where new ideas emerge with the speed of light. Do you know what’s the usual lifetime of shiny new javascript library, one of 4 hundreds coming out daily? Well, I don’t know too but I guess you wouldn’t be able to complete a todo app before the library of your choice became deprecated :)</p>
<p>Speaking of project building tools, as a Clojurists we happily sit in a comfort zone. Up until recently, there was only one way to keep your clojure project organized - <a href="http://http//leiningen.org/">Leiningen</a>. Elegant declarative way which leiningen used to describe entire project with all its dependencies and profiles immediately reminded me of maven tons of hand-crafted pom.xmls. Easy when you finally get it, extremally hard when you try to customize.</p>
<p>Right on the other corner stands Boot. Instead of declarative DSL it gives a full power of Clojure - each task is just a Clojure function. It’s even more fun when you realize that boot tasks can be called (just as regular functions) straight from REPL. Having seen that first time crazy idea sparkled in my mind…</p>
<p>I guess every Clojurist already read <a href="http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded">Clojure Workflow Reloaded</a>. General idea behind is dead simple. To have a reloadable “system” one needs to implement start/stop/reset functions and call them to start the system, to stop it and reload when needed. Now, let’s assume we have it already written, it works as expected and the only pain is to switch to repl and call our reset function each time something substantial has changed in our app.</p>
<p>Wouldn’t it be nicer to have resetting under the Emacs shortcut so every Clojure project following Stuart’s reloadable flow (ie. having system start/stop/reset implemented) could be restarted just by a simple key stroke?</p>
<p>This is where Boot really shines. To have system reloadable by Boot we need to implement reset task:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">foo.system</span><span class="p">])</span>

<span class="p">(</span><span class="nf">deftask</span> <span class="nv">reset</span>
  <span class="s">&#34;Restarts system&#34;</span>
  <span class="p">[]</span>
  <span class="p">(</span><span class="nf">foo.system/reset</span><span class="p">))</span>
</code></pre></div><p>Each boot-ized project following this simple rule immediately becomes reset-able just by calling boot.user/reset. That simply means, we could evaluate it directly from Emacs connected to REPL via glorious Cider:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="p">(</span><span class="nf">defun</span> <span class="nv">repl-reset</span> <span class="p">()</span>
  <span class="s">&#34;Sends (reset) to currently running repl&#34;</span>
  <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">save-buffer</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">cider-interactive-eval</span> <span class="s">&#34;(boot.user/reset)&#34;</span><span class="p">))</span>

<span class="p">(</span><span class="nf">global-set-key</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&#34;C-x x&#34;</span><span class="p">)</span> <span class="ss">&#39;repl-reset</span><span class="p">)</span>
</code></pre></div><p>Have a nice system resets ;)</p>
]]></content>
        </item>
        
        <item>
            <title>Emacs Windows Switching</title>
            <link>https://blog.bitside.pl/posts/emacs-windows-switching/</link>
            <pubDate>Sun, 09 Oct 2016 16:52:00 +0200</pubDate>
            
            <guid>https://blog.bitside.pl/posts/emacs-windows-switching/</guid>
            <description>It takes a few days for beginner Emacs user to learn what’s the difference between windows and frames. Then usually next question arises: how to switch between multiple windows within same Emacs frame?
The most obvious way is to use mouse/touchpad of course. It’s easy at the beginning but horribly distracting in a long term. Emacs unfortunately doesn’t really help with its crazy default shortcuts. There is C-x o described as “select another window” which cycles through all available windows.</description>
            <content type="html"><![CDATA[<p>It takes a few days for beginner Emacs user to learn what’s the difference between windows and frames. Then usually next question arises: how to switch between multiple windows within same Emacs frame?</p>
<p>The most obvious way is to use mouse/touchpad of course. It’s easy at the beginning but horribly distracting in a long term. Emacs unfortunately doesn’t really help with its crazy default shortcuts. There is C-x o described as “select another window” which cycles through all available windows. Well, good luck with selecting windows this way longer than a day.</p>
<p>But hey, there is a hope. Default windows switching is so insane that lot of people tried to address this problem with additional packages. One of the most popular is <a href="https://melpa.org/#/window-numbering">window numbering</a>:</p>
<blockquote>
<p>Enable window-numbering-mode and use M-1 through M-0 to navigate.</p>
</blockquote>
<p>Yup, that’s what we really need - simple shortcuts to activate immediately each window in a frame. But there is something more. Having frame split into multiple windows sooner or later makes some of them awfully hard to use beacuse of little space they occupy. Time to introduce a real hero - <a href="https://melpa.org/#/golden-ratio">golden ratio</a> package which resizes seleted windows to the size specified in the <a href="https://en.wikipedia.org/wiki/Golden_ratio">“Golden Ratio”</a>. Sounds cool, works even cooler when bound with shortcuts provided by window-numbering:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">select-window-by-number</span> <span class="p">(</span><span class="nv">after</span> <span class="nv">select-window</span> <span class="nv">activate</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">golden-ratio</span><span class="p">))</span>
</code></pre></div><p>This is how it looks like in action:</p>
<img src="/images/emacs-window-switching.gif" width="760">
]]></content>
        </item>
        
        <item>
            <title>Clojure for fun &amp; profit</title>
            <link>https://blog.bitside.pl/posts/clojure-for-fun-and-profit/</link>
            <pubDate>Sun, 02 Aug 2015 11:29:00 +0200</pubDate>
            
            <guid>https://blog.bitside.pl/posts/clojure-for-fun-and-profit/</guid>
            <description>This is my initial blog note - first from series I’m going to write about one of the most innovative programming languages we can hear of nowadays - about Clojure. New incarnation of almost forgotten Lisp came back onto scene bending minds of thousands of programmers who suddenly discover again the joy of programming.
Lot of arcticles have been already written about Clojure and why it’s so attractive. Not to repeat all of these oh’s and ah’s I would like to sum up things most important for me as a long-time professional java programmer:</description>
            <content type="html"><![CDATA[<p>This is my initial blog note - first from series I’m going to write about one of the most innovative programming languages we can hear of nowadays - about Clojure. New incarnation of almost forgotten Lisp came back onto scene bending minds of thousands of programmers who suddenly discover again the joy of programming.</p>
<p>Lot of arcticles have been already written about Clojure and why it’s so attractive. Not to repeat all of these oh’s and ah’s I would like to sum up things most important for me as a long-time professional java programmer:</p>
<ul>
<li>
<p>Clojure is concise. This is the very first impression you’ll get coming from Java world. And this is also the first pain and mind-bender for someone grown from object-oriented world - Clojure is more about ‘what’ you want to implement rather than ‘how’. Simple example: loops. It’s quite unusual to see for-loop in Clojure sources. Why? In a Java world loops are usually introduced (or were introduced before streams came along with Java 8) to iterate on collection of objects either to produce a new collection or to generate result based on all iterated objects. Well, in Clojure world you have a map &amp; reduce functions doing exactly the same thing, so why bother with iterating by hand?</p>
</li>
<li>
<p>Clojure is dynamically typed. That sounds a bit scary for Java programmer. No types? Isn’t it a smell of Javascript with all its fancy type coercion? Not really. First of all you may always enforce type checking, eg. by using Prismatic Schema or core.typed. Secondly as Clojure website says:</p>
<blockquote>
<p>First and foremost, Clojure is dynamic. That means that a Clojure program is not just something you compile and run, but something with which you can interact.</p>
</blockquote>
<p>which leads to the most favourite thing that Clojure puts into programmer’s hand: REPL</p>
</li>
<li>
<p>Read-Eval-Print-Loop (REPL). Since I used it first time, I knew I’ve just became REPL Driven Developer. Honestly, this is first time I could bring my weird ideas immediately into live just by pasting code into REPL and see the result. No recompilation, no restarts, just me and my idea without any technical obstacles. This is how I imagine instant prototyping and the productivity boost I experienced was tremendous.</p>
</li>
<li>
<p>Functions as an API. It isn’t something raised up very often but having the code split into namespaces and structured well enough (+ some macro sugar added) you quickly discover that recently popular fluent API DSLs so horrible to write in Java are apparently pleasure to design in Clojure. With a few functions you may get something like this for free (sample from my branch of flux - clojure client for Solr):</p>
</li>
</ul>
<!--listend-->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;flux.criteria</span><span class="p">)</span>

<span class="p">(</span><span class="nf">with-filter</span>
   <span class="p">(</span><span class="nf">or</span>
     <span class="p">(</span><span class="nf">has</span> <span class="ss">:description</span> <span class="s">&#34;nówka sztuka&#34;</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">and</span>
        <span class="p">(</span><span class="nf">is</span> <span class="ss">:currency</span> <span class="s">&#34;PLN&#34;</span><span class="p">)</span>
        <span class="p">(</span><span class="nf">between</span> <span class="ss">:price</span> <span class="p">[</span><span class="mi">5000</span> <span class="mi">15000</span><span class="p">]))))</span>
</code></pre></div><ul>
<li>No frameworks. That’s the least impressive but very important point. Coming into Clojure world you immediately discover there are no fully blown web frameworks, dependency injection frameworks, whatsoever frameworks. Seems sad at the beginning but while your experience grow you realise it’s much easier to grab few popular libraries and tie them together by yourself rather than spend next few months on debugging framework code and wonder how to implement a thing that wasn’t planned by framework creators before.</li>
</ul>
<p>Still interested in Clojure? Good to hear. In a next few posts I’ll try to describe in detail few libraries/tools that impressed me the most while I was experimenting with Clojure functional programming. To have a track of all articles and repositories that occured to be really useful I’ve created a github repo containing all the links: <a href="https://github.com/mbuczko/awesome-clojure">awesome-clojure</a>.</p>
<p>Enjoy!</p>
]]></content>
        </item>
        
        <item>
            <title>Swank JS</title>
            <link>https://blog.bitside.pl/posts/swank-js/</link>
            <pubDate>Mon, 16 Jul 2012 21:20:00 +0200</pubDate>
            
            <guid>https://blog.bitside.pl/posts/swank-js/</guid>
            <description>Have you ever dreamed about changing the content displayed by your web browser straight from text editor?
Latest Episode 11 at Emacs Rocks discovers how you may speed up your web development with awesome swank-js. Btw. if you still don’t have Emacs Rocks in your RSS reader, I highly recommend adding this source right now. It’s excellent place of tips &amp;amp; tricks especially helpful during daily work with emacs.
What is swank-js?</description>
            <content type="html"><![CDATA[<p>Have you ever dreamed about changing the content displayed by your web browser straight from text editor?</p>
<p>Latest <a href="http://emacsrocks.com/e11.html">Episode 11</a> at Emacs Rocks discovers how you may speed up your web development with awesome swank-js. Btw. if you still don’t have Emacs Rocks in your RSS reader, I highly recommend adding this source right now. It’s excellent place of tips &amp; tricks especially helpful during daily work with emacs.</p>
<p>What is swank-js? As description on github says, it provides javascript REPL (read-eval-print loop) attached magically (well, actually through Socket.IO to browser. It simply means, all javascript expressions typed in REPL shell affect immediately page we’re connected to. Moreover, there is no need to use shell, we may send code and CSSes to browser directly from working buffer!</p>
<p>Sounds familiar? No? Take a look at Bret Victor’s presentation <a href="http://vimeo.com/36579366">Inventing on Principle</a>, one of these tech talks which stays in mind for a long time.</p>
<p>swank-js was a missing part in my web developer’s toolbox which I tried to replace with <a href="https://github.com/bard/mozrepl/wiki/">moz-repl</a>. Unfortunately, moz-repl has some limitations, eg. as name suggests it works only with mozilla-based browsers (like firefox). Yup, no Chrome, no Safari.</p>
<p>Now, I’m extremally happy to have Chrome opened on one screen, Emacs on the other and immediately visualize changes on my web page just with one <code>C-c C-c</code>.</p>
]]></content>
        </item>
        
        <item>
            <title>How fast do you type?</title>
            <link>https://blog.bitside.pl/posts/how-fast-you-type/</link>
            <pubDate>Mon, 09 Jul 2012 18:50:00 +0200</pubDate>
            
            <guid>https://blog.bitside.pl/posts/how-fast-you-type/</guid>
            <description>&lt;p&gt;I found recently brilliant page, I’d like to share with. &lt;a href=&#34;http://play.typeracer.com/&#34;&gt;TypeRacer&lt;/a&gt; is the place where you can measure your typing speed and compare it with other participants. One word of warning - it’s horribly addicting.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>I found recently brilliant page, I’d like to share with. <a href="http://play.typeracer.com/">TypeRacer</a> is the place where you can measure your typing speed and compare it with other participants. One word of warning - it’s horribly addicting.</p>
<p>Actually, there is one more warning. If you think you’re extremally fast typist, you may end up with litle depression - just like me, with my 54 words per minute.</p>
<p>My God, I was pretty sure I could easily beat <a href="http://www.youtube.com/watch?v=4GDusA21cEA">this guy</a> but looks like the level of 227 words per minute is a bit to high for me. Well, at least now :)</p>]]></content>
        </item>
        
        <item>
            <title>Javascript programming</title>
            <link>https://blog.bitside.pl/posts/javascript-programming/</link>
            <pubDate>Thu, 05 Jul 2012 20:30:00 +0200</pubDate>
            
            <guid>https://blog.bitside.pl/posts/javascript-programming/</guid>
            <description>Javascript has undoubtedly its great time nowadays. Not only it is used by web browsers but also became popular as an efficient server side solution (just to mention node.js) for many performance problems. Along with javascript growth we could observe raise and fall of dedicated IDEs. Years ago when I started my adventure with javascript I had to choose between Aptana and (paid) IntelliJ Idea. All other editors either supported javascript poorly or didn’t support it at all.</description>
            <content type="html"><![CDATA[<p>Javascript has undoubtedly its great time nowadays. Not only it is used by web browsers but also became popular as an efficient server side solution (just to mention <a href="http://nodejs.org/">node.js</a>) for many performance problems. Along with javascript growth we could observe raise and fall of dedicated IDEs. Years ago when I started my adventure with javascript I had to choose between Aptana and (paid) IntelliJ Idea. All other editors either supported javascript poorly or didn’t support it at all.</p>
<p>Today, looks like we have quite different situation. We have <a href="http://www.sublimetext.com/">Sublime Text</a>, <a href="http://www.eclipse.org/">Eclipse</a> with tons of plugins, and (surprise) Emacs with <a href="https://github.com/mooz/js2-mode">js2-mode</a>. If you are considering Emacs as your primary IDE for javascript - js2-mode is a must.</p>
<p>Recently, its co-author - Dmitry Gutov implemented one thing that convinced me to drop other editors (yes, including Sublime). Let’s start with a few words of explanation what the ‘imenu’ is.</p>
<p><a href="http://emacswiki.org/emacs/ImenuMode">Imenu mode</a> is a list of functions and definitions gathered from current buffer. It allows you switching immediately between them just with few keys stokes. The list is presented either in system menu or as mini-buffer completion (which may be boosted by ido) or by awesome anything-imenu.</p>
<p>js2-mode supported imenu for a long time but it was not able to recognize few javascript constructions, thus the list of functions was horribly limited. I opened a <a href="https://github.com/mooz/js2-mode/issues/27">ticket</a> on github kindly trying to ask Dmitry for a few enhancements.</p>
<p>And voila! Since June we may admire js2-mode with imenu in action having code like this (<a href="http://backbonejs.org/">backbone based</a>):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">Views</span><span class="p">.</span><span class="nx">Shelf</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
    <span class="nx">template</span><span class="o">:</span> <span class="nx">JST</span><span class="p">[</span><span class="s1">&#39;app/shelf&#39;</span><span class="p">],</span>
    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#container .shelf&#39;</span><span class="p">,</span>
    <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
    <span class="p">},</span>
    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="p">},</span>
    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">})</span>
</code></pre></div><p>or ‘module’ patterns like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="nx">bar</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
    <span class="p">};</span>
<span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</code></pre></div><p>The pleasure of using Emacs with javascript has just raised by 100% :)</p>
<p>Thanks Dmitry!</p>
]]></content>
        </item>
        
        <item>
            <title>Be social</title>
            <link>https://blog.bitside.pl/posts/be-social/</link>
            <pubDate>Wed, 04 Jul 2012 21:10:00 +0200</pubDate>
            
            <guid>https://blog.bitside.pl/posts/be-social/</guid>
            <description>Emacs isn’t only a best-class editor which offers you productivity boost for free. It’s also all-in-one environment which embeds most frequently used tools like console (eshell), irc (erc), news reader (gnus) and… well known “social” gadgets like gtalk and twitter. Yes, that means, you may communicate with friends and check your tweets not even leaving editor window.
Let me show how to configure both.
GTalk Gtalk bases on open protocol (jabber), so the only thing we need is a jabber client.</description>
            <content type="html"><![CDATA[<p>Emacs isn’t only a best-class editor which offers you productivity boost for free. It’s also all-in-one environment which embeds most frequently used tools like console (eshell), irc (erc), news reader (gnus) and… well known “social” gadgets like gtalk and twitter. Yes, that means, you may communicate with friends and check your tweets not even leaving editor window.</p>
<p>Let me show how to configure both.</p>
<h2 id="gtalk">GTalk</h2>
<p>Gtalk bases on open protocol (jabber), so the only thing we need is a jabber client. Looking at emacs wiki you will easily find <a href="http://www.emacswiki.org/emacs/JabberEl">this one</a> along with exhaustive documentation.</p>
<p>There is also additional <a href="http://www.emacswiki.org/emacs/GoogleTalk">wiki page</a> dedicated to jabber+gtalk configuration, so if you need details take a look at it.</p>
<p>You may also base on my own configuration:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">setq</span> <span class="nv">jabber-account-list</span> <span class="o">&#39;</span><span class="p">((</span><span class="s">&#34;username@gmail.com&#34;</span>
                              <span class="p">(</span><span class="ss">:password</span> <span class="o">.</span> <span class="no">nil</span><span class="p">)</span>
                              <span class="p">(</span><span class="ss">:network-server</span> <span class="o">.</span> <span class="s">&#34;talk.google.com&#34;</span><span class="p">)</span>
                              <span class="p">(</span><span class="ss">:port</span> <span class="o">.</span> <span class="mi">443</span><span class="p">)</span>
                              <span class="p">(</span><span class="ss">:connection-type</span> <span class="o">.</span> <span class="nv">ssl</span><span class="p">)))</span>

      <span class="nv">jabber-vcard-avatars-retrieve</span> <span class="no">nil</span>

      <span class="nv">my-chat-prompt</span> <span class="s">&#34;[%t] %n &#34;</span>
      <span class="nv">jabber-muc-private-foreign-prompt-format</span> <span class="s">&#34;[%t] %g/%n &#34;</span>
      <span class="nv">jabber-chat-foreign-prompt-format</span> <span class="nv">my-chat-prompt</span>
      <span class="nv">jabber-chat-local-prompt-format</span> <span class="nv">my-chat-prompt</span>
      <span class="nv">jabber-groupchat-prompt-format</span> <span class="nv">my-chat-prompt</span>

      <span class="nv">jabber-chat-header-line-format</span>
      <span class="o">&#39;</span><span class="p">(</span><span class="s">&#34; &#34;</span> <span class="p">(</span><span class="ss">:eval</span> <span class="p">(</span><span class="nv">jabber-jid-displayname</span> <span class="nv">jabber-chatting-with</span><span class="p">))</span>
      <span class="s">&#34; &#34;</span> <span class="p">(</span><span class="ss">:eval</span> <span class="p">(</span><span class="nv">jabber-jid-resource</span> <span class="nv">jabber-chatting-with</span><span class="p">))</span> <span class="s">&#34;\t&#34;</span><span class="c1">;</span>
      <span class="p">(</span><span class="ss">:eval</span> <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">buddy</span> <span class="p">(</span><span class="nv">jabber-jid-symbol</span> <span class="nv">jabber-chatting-with</span><span class="p">)))</span>
                 <span class="p">(</span><span class="nv">propertize</span>
                  <span class="p">(</span><span class="nb">or</span>
                   <span class="p">(</span><span class="nf">cdr</span> <span class="p">(</span><span class="nf">assoc</span> <span class="p">(</span><span class="nf">get</span> <span class="nv">buddy</span> <span class="ss">&#39;show</span><span class="p">)</span> <span class="nv">jabber-presence-strings</span><span class="p">))</span>
                   <span class="p">(</span><span class="nf">get</span> <span class="nv">buddy</span> <span class="ss">&#39;show</span><span class="p">))</span>
                  <span class="ss">&#39;face</span>
                  <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nf">cdr</span> <span class="p">(</span><span class="nf">assoc</span> <span class="p">(</span><span class="nf">get</span> <span class="nv">buddy</span> <span class="ss">&#39;show</span><span class="p">)</span> <span class="nv">jabber-presence-faces</span><span class="p">))</span>
                      <span class="ss">&#39;jabber-roster-user-online</span><span class="p">))))</span>
      <span class="s">&#34;\t&#34;</span> <span class="p">(</span><span class="ss">:eval</span> <span class="p">(</span><span class="nf">get</span> <span class="p">(</span><span class="nv">jabber-jid-symbol</span> <span class="nv">jabber-chatting-with</span><span class="p">)</span> <span class="ss">&#39;status</span><span class="p">))</span>
      <span class="p">(</span><span class="ss">:eval</span> <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nf">equal</span> <span class="s">&#34;&#34;</span> <span class="vg">*jabber-current-show*</span><span class="p">)</span>
                 <span class="p">(</span><span class="nv">concat</span> <span class="s">&#34;\t You&#39;re &#34;</span> <span class="vg">*jabber-current-show*</span>
                         <span class="s">&#34; (&#34;</span> <span class="vg">*jabber-current-status*</span> <span class="s">&#34;)&#34;</span><span class="p">)))))</span>
</code></pre></div><p>It looks complicated at the first sight, but in fact there is nothing more than setting account details <code>jabber-account-list</code>, disabling retrieval of other people’s avatars <code>jabber-vcard-avatars-retrieve</code> and customizing prompts and header line <code>jabber-chat-header-line-format</code>.</p>
<p>To launch jabber just with one command I use following function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">defun</span> <span class="nv">jabber</span><span class="p">()</span>
  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>

  <span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;jabber</span><span class="p">)</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">jabber-chat-fill-long-lines</span> <span class="no">nil</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">auto-fill-mode</span> <span class="mi">-1</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">jabber-connect-all</span><span class="p">))</span>
</code></pre></div><p>Now, <code>M-x jabber</code> connects immediately to gtalk kindly asking for password.</p>
<h2 id="twitter">Twitter</h2>
<p><a href="http://www.emacswiki.org/emacs/TwitteringMode">Twittering Mode</a> is all you need here. Similar to gtalk, I wrote a function which simplifies twitter launching:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">defun</span> <span class="nv">twitter</span><span class="p">()</span>
  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;twittering-mode</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">twit</span><span class="p">))</span>
</code></pre></div><p>and simple configuration:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">setq</span> <span class="nv">twittering-use-master-password</span> <span class="no">t</span>
      <span class="nv">twittering-initial-timeline-spec-string</span>
      <span class="o">&#39;</span><span class="p">(</span><span class="s">&#34;:home&#34;</span>
        <span class="s">&#34;:replies&#34;</span>
        <span class="s">&#34;:direct_messages&#34;</span><span class="p">))</span>
</code></pre></div><p><code>twittering-use-master-password</code> avoid having to authorize twittering-mode each time it’s launched. It keeps tokens in encrypted <code>=.twittering-mode.gpg</code> file. As you noticed, encryption is based on gpg so you also need <a href="http://www.emacswiki.org/emacs/GnuPG">GnuPG</a> and either <a href="http://www.emacswiki.org/emacs/EasyPG">EasyPG</a> or alpaca.el which I found <a href="https://github.com/unpluggd/alpaca.el">here</a>.</p>
<p>Once it’s all installed, you are ready to start twittering mode <code>M-x twitter</code>. If it’s run first time, twittering mode will ask for authorizing PIN number which you can gather from twitter page. This page shows up immediately in your browser if you only allow emacs running web browser for you.</p>
<p>Last thing is setting a password to <code>.twittering-mode.gpg</code> and exactly this password you have to provide each time you will run twittering-mode in the future.</p>
<p>Good luck!</p>
]]></content>
        </item>
        
        <item>
            <title>Moving to Octopress</title>
            <link>https://blog.bitside.pl/posts/moving-to-octopress/</link>
            <pubDate>Wed, 04 Jul 2012 22:10:00 +0200</pubDate>
            
            <guid>https://blog.bitside.pl/posts/moving-to-octopress/</guid>
            <description>Finally, after few attempts I decided to move all my posts from tumblr blog to octopress. There were few reasons behind this decision:
 I like having entire blog under my own control. Octopress keeps whole the stuff under git which gives history of all changes, branches and tags. That’s really awesome for programmer like me. Hosting on github. There are not enough words to express how github revolutionized my daily workflow.</description>
            <content type="html"><![CDATA[<p>Finally, after few attempts I decided to move all my posts from tumblr blog to octopress. There were few reasons behind this decision:</p>
<ul>
<li>I like having entire blog under my own control. Octopress keeps whole the stuff under git which gives history of all changes, branches and tags. That’s really awesome for programmer like me.</li>
<li>Hosting on github. There are not enough words to express how github revolutionized my daily workflow. I use this brilliant application in my everyday work, so why shouldn’t I use it for blogging too.</li>
<li>Ruby. I love ruby. Octopress is based on ruby, thus I love octopress too :)</li>
<li>Emacs. I’m org-mode addicted. Having a possibility to blog using org-mode is priceless.</li>
</ul>
<p>If you consider simmilar transition and you need more reasons, look at <a href="http://octopress.org/">Octopress main page</a>. It says why and how you may start your journey with Octopress.</p>
]]></content>
        </item>
        
        <item>
            <title>Gnus</title>
            <link>https://blog.bitside.pl/posts/gnus/</link>
            <pubDate>Fri, 30 Mar 2012 21:30:00 +0200</pubDate>
            
            <guid>https://blog.bitside.pl/posts/gnus/</guid>
            <description>A side note. This is a rough translation of my original article sent a few years ago to “Magic of the black screen” competition. If you are jaunty masochist fascinated by use ‘n cry email readers, or you were just searching for something about white-tailed gnus and you found this article - sorry to dissapoint you - that’s definitely wrong place.
On the other hand, if you value your time, simplicity and usability, and the only thing that comes to your mind when talking about GNU is GNU’s Not Unix, you’re welcomed to read further.</description>
            <content type="html"><![CDATA[<aside>A side note. This is a rough translation of my original article sent a few years ago to “Magic of the black screen” competition.</aside>
<p>If you are jaunty masochist fascinated by use ‘n cry email readers, or you were just searching for something about white-tailed gnus and you found this article - sorry to dissapoint you - that’s definitely wrong place.</p>
<p>On the other hand, if you value your time, simplicity and usability, and the only thing that comes to your mind when talking about GNU is GNU’s Not Unix, you’re welcomed to read further. You will find out how set up awesome email/news reader (Gnus) on great operating system with faulty editor (Emacs).</p>
<h2 id="introduction">Introduction</h2>
<p>A few words about Gnus. Its look and feel, configuration and number of available options causes random ventricular fibrillation at first attempt. Yes, it’s not easy, but Gnus configured once lives for ever.</p>
<p>What you get in return (after half a year of digging in configuration files) is following:</p>
<ul>
<li>email/news handling (imap supported!)</li>
<li>receving/sending from multiple accounts</li>
<li>articles expiring</li>
<li>scoring based on actually everything you can imagine</li>
<li>advanced searching (even more advanced when used together with mairix)</li>
<li>threads filtering</li>
<li>splitting incoming emails into configured groups</li>
<li>bbdb-based address book (or even better - org-contacts)</li>
<li>signing and enrcypting</li>
<li>finally, lisp hooks for almost every action</li>
</ul>
<h2 id="general-customization">General customization</h2>
<p>A small note at the beginning. Our goal here is to refine Gnus look and feel (to be not ashamed by outlook users) rather than to analyze its imap/smtp/nntp confguration.</p>
<p>Half of success on the way to get beautiful Gnus is improving Emacs colors. I suggest zen burn color theme (by Bozhidar Batsov) to make Emacs look better than average screen-locker (hello VI users :)</p>
<p>Next thing is smartly chosen font. Nice semigraphic symbols make Gnus a lighting star (or even a supernova) comparing to other (ugly) email clients.</p>
<p>This is what I added to my ~/.Xresources (linux):</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">Emacs.FontBackend: xft
Emacs*font: DejaVu Sans Mono-9
</code></pre><p>DejaVu font is highly recommened because of huge number of supported national characters and fancy Unicode symbols.</p>
<p>If you use linux and you have just modified your .Xresources, time to reload it: <code>xrdb -load ~/.Xresources</code></p>
<h2 id="groups-configuration">Groups configuration</h2>
<p>Groups are exactly what you see on first screenshot above. These are “folders” containing articles from different sources. As you can see, they can be additionally grouped under common topics. I have splitted sources of my articles to make them visually separated. Polish NNTP servers are grouped under usenet topic, articles coming from Gmane are under gmane and results of recent searches go into searches topic.</p>
<p>Creating, modification of topics and moving groups between them is pretty simple and is described <a href="http://www.gnu.org/software/emacs//manual/html_node/gnus/Group-Topics.html#Group-Topics">here</a>.</p>
<p>However, the most interesting is the look of our groups. It’s configurable (as everything else in Gnus) through appropriate variable set in ~/.gnus file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">setq</span> <span class="nv">gnus-group-line-format</span> <span class="s">&#34;%P%M%St%(%g%) (%y)n&#34;</span><span class="p">)</span>
</code></pre></div><p>Description of formatting characters you may find <a href="http://www.gnu.org/software/emacs/manual/html_node/gnus/Group-Line-Specification.html#Group-Line-Specification">here</a>.</p>
<p>Ok, Gnus looks much better now. But there is one little caveat. Everytime when Gnus starts, it tries to actualize our groups connecting to servers that groups are based on. It’s nothing wrong when you have one or two groups, but having them more may cause a long, irritating delay. Thanks God, there is something called levels, which modifies a bit this behaviour.</p>
<p>How do levels work? They are assigned to each group and instruct Gnus, among others, when to update the content. If given level is equal or below the value assigned to gnus-activate-level variable, the group it is assigned to updates itself automatically at startup. Higher value says “leave me alone, I will update myself right after I get selected”.</p>
<p>Let’s set the default activation level to 3:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">setq</span> <span class="nv">gnus-activate-level</span> <span class="mi">3</span><span class="p">)</span>
</code></pre></div><p>Now, each group which doesn’t need to be updated automatically should have level &gt; 3 assigned. To do that, it’s enough to highlight the group, press <code>S l</code> shortcut, and adjust level. You will soon notice visual difference between “automatically updated” and “lazy” groups. First ones show number of collected articles, second ones show only meaningless “*”.</p>
<p>Additionally, each group has variable associated with styling (faces).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="c1">;; Mailing groups</span>
<span class="nv">gnus-group-mail-1</span>    <span class="nv">gnus-group-mail-1-empty</span>
<span class="nv">gnus-group-mail-2</span>    <span class="nv">gnus-group-mail-2-empty</span>
<span class="nv">gnus-group-mail-3</span>    <span class="nv">gnus-group-mail-3-empty</span>

<span class="c1">;; News groups</span>
<span class="nv">gnus-group-news-1</span>    <span class="nv">gnus-group-news-1-empty</span>
<span class="nv">gnus-group-news-2</span>    <span class="nv">gnus-group-news-2-empty</span>
<span class="nv">gnus-group-news-3</span>    <span class="nv">gnus-group-news-3-empty</span>
<span class="nv">gnus-group-news-4</span>    <span class="nv">gnus-group-news-4-empty</span>
<span class="nv">gnus-group-news-5</span>    <span class="nv">gnus-group-news-5-empty</span>
</code></pre></div><p>So, to have blue empty mailing group, we need to set in ~/.gnus something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">set-face-foreground</span> <span class="ss">&#39;gnus-group-mail-1-empty</span> <span class="s">&#34;blue&#34;</span><span class="p">)</span>
</code></pre></div><p>One note here. Empty groups mean those with 0 articles AND those lazy ones which do not update the content automatically.</p>
<h2 id="configuration-of-articles-list">Configuration of articles list</h2>
<p>List of articles is something you see after choosing the group. And this is the place which we may deeply customize. First of all, let’s format the way how articles are presented. To do that, I suggest to modify gnus-summary-line-format variable:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">setq</span> <span class="nv">gnus-summary-line-format</span> <span class="s">&#34;%1{%U%R%z: %}%2{%d%}%5{ %[%4i%] %}%4{%-24,24n%}%6{%-4,4ur%}%5{| %}%(%1{%B%}%s%)n&#34;</span><span class="p">)</span>
</code></pre></div><p>Again, full description of used characters you may find <a href="http://www.gnu.org/software/emacs/manual/html_node/gnus/Summary-Buffer-Lines.html#Summary-Buffer-Lines">here</a>.</p>
<p>Now, a few words of explanation. Text between %( and %) will be highlighted using gnus-mouse-face immediately when mouse pointer hovers over given article. In our example <code>%(%1{%B%}%s%)</code> means that we want article subject <code>(%s)</code> and a corresponding part of thread’s tree <code>(%B)</code> highlighted on mouse hover. By default, thread is presented with plain ascii characters, just like this:</p>
<pre class="plain">
->
| +->
|->
+->
</pre>
<p>Obviously, it’s nothing really amazing. Fortunately, Emacs (in contrast to Mutt for example) gives a possibility to adjust every single character of that tree. Using that (and UTF symbols), we may get interesting effect:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">when</span> <span class="nv">window-system</span>
  <span class="p">(</span><span class="k">setq</span>
    <span class="nv">gnus-sum-thread-tree-root</span> <span class="s">&#34;● &#34;</span>
    <span class="nv">gnus-sum-thread-tree-false-root</span> <span class="s">&#34;▷ &#34;</span>
    <span class="nv">gnus-sum-thread-tree-single-indent</span> <span class="s">&#34;&#34;</span>
    <span class="nv">gnus-sum-thread-tree-leaf-with-other</span> <span class="s">&#34;├─►&#34;</span>
    <span class="nv">gnus-sum-thread-tree-vertical</span> <span class="s">&#34;│ &#34;</span>
    <span class="nv">gnus-sum-thread-tree-single-leaf</span> <span class="s">&#34;└─►&#34;</span><span class="p">))</span>
</code></pre></div><p>What <code>(when window-system …)</code> does is limiting above change to GUI version of Emacs only, this change won’t be applied to Gnus run in console.</p>
<p>Let’s look again at out gnus-summary-line-format. Something strange hides there inside: <code>%6{%-4,4ur%}</code></p>
<p>What does it mean? As manual says, <code>%u</code> and following letter corresponds to user defined function <code>gnus-user-format-function-X</code> (where X is a symbol which goes right after <code>%u</code>). So, <code>%ur</code> will be used to inject the return value from <code>gnus-user-format-function-r</code> and <code>$-4,4</code> instructs to align this value to length of 4 characters. Prepending <code>%6</code> suggests to apply <code>gnus-face-6</code> to everything inside curly parentheses.</p>
<p>Ok, I guess it’s clear more or less, but there is still question: what it that combination used for?</p>
<p>I bet you have already seen labels in GMail. Yes, it’s one of these addicting little things that you can’t live without. Moreover, such a label makes your searches and filtering much easier! So why not to try it out with Gnus?</p>
<p>Here is the result:</p>
<figure><img src="/images/gnus4.jpeg"/>
</figure>

<p>Red 4-letter labels distinguish interesting emails from the overall noise. This is realised exactly by previously mentioned snippet <code>%6{%-4,4ur%}</code> put inside our gnus-summary-line-format. As we remember <code>%-4,4ur</code> injects result of <code>gnus-user-format-function-r</code> function. This is how this function looks like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rs-gnus-get-label</span> <span class="p">(</span><span class="nv">header</span><span class="p">)</span>
  <span class="s">&#34;Returns label from X-Label header&#34;</span>
  <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nf">cdr</span> <span class="p">(</span><span class="nv">assq</span> <span class="ss">&#39;X-Label</span> <span class="p">(</span><span class="nv">mail-header-extra</span> <span class="nv">header</span><span class="p">)))</span> <span class="s">&#34;&#34;</span><span class="p">))</span>

<span class="p">(</span><span class="nv">defalias</span> <span class="ss">&#39;gnus-user-format-function-r</span> <span class="ss">&#39;rs-gnus-get-label</span><span class="p">)</span>
</code></pre></div><p>Additionally, we need to list this header in nnmail-extra-headers variable:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">setq</span> <span class="nv">nnmail-extra-headers</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">To</span> <span class="nv">X-Label</span> <span class="nv">Newsgroups</span> <span class="nv">Content-Type</span><span class="p">))</span>
</code></pre></div><p>&hellip;and apply red color:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">copy-face</span> <span class="ss">&#39;default</span> <span class="ss">&#39;face-label</span><span class="p">)</span>
<span class="p">(</span><span class="nv">set-face-foreground</span> <span class="ss">&#39;face-label</span> <span class="s">&#34;red&#34;</span><span class="p">)</span>
<span class="p">(</span><span class="k">setq</span> <span class="nv">gnus-face-6</span> <span class="ss">&#39;face-label</span><span class="p">)</span>
</code></pre></div><h2 id="how-about-filtering">How about filtering ?</h2>
<p>Nice. Now, let’s try to filter our mails by given label. Here is the function we will use (written by Reiner Steib):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rs-gnus-summary-limit-to-label</span> <span class="p">(</span><span class="nv">regexp</span> <span class="k">&amp;optional</span> <span class="nv">not-matching</span><span class="p">)</span>
  <span class="s">&#34;Limit the summary buffer to articles that match a label.&#34;</span>
  <span class="p">(</span><span class="nv">interactive</span>
   <span class="p">(</span><span class="nc">list</span> <span class="p">(</span><span class="nv">read-string</span>
     <span class="p">(</span><span class="nf">format</span> <span class="s">&#34;%s label (regexp): &#34;</span>
     <span class="p">(</span><span class="k">if</span> <span class="nv">current-prefix-arg</span> <span class="s">&#34;Exclude&#34;</span> <span class="s">&#34;Limit to&#34;</span><span class="p">)))</span> <span class="nv">current-prefix-arg</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">gnus-summary-limit-to-extra</span> <span class="ss">&#39;X-Label</span> <span class="nv">regexp</span> <span class="nv">not-matching</span><span class="p">))</span>
</code></pre></div><p>Next, invoke this function <code>M-x rs-gnus-summary-limit-to-label</code> providing the label you want to filter by (use tab to autocomplete!) and enjoy with result:</p>
<figure><img src="/images/gnus6.jpeg"/>
</figure>

<p>Simple and easy, isn’t it?</p>
<p>Let&rsquo;s get also list of articles sorted from the newest to the oldest ones, and filter out unnecessary headers from detailed view:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">setq</span>
  <span class="nv">gnus-thread-sort-functions</span> <span class="o">&#39;</span><span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">t1</span> <span class="nv">t2</span><span class="p">)</span> <span class="p">(</span><span class="nf">not</span> <span class="p">(</span><span class="nv">gnus-thread-sort-by-date</span> <span class="nv">t1</span> <span class="nv">t2</span><span class="p">)))</span>
  <span class="nv">gnus-visible-headers</span> <span class="s">&#34;^From:|^To:|^Subject:|^Newsgroups:|^Date:|^Organization:|^X-Newsreader:|^User-Agent:&#34;</span>
  <span class="nv">gnus-extra-headers</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">To</span> <span class="nv">Newsgroups</span> <span class="nv">Content-Type</span><span class="p">))</span>
</code></pre></div><h2 id="grand-finale">Grand finale</h2>
<p>Last thing last - nasty HTML emails. This is something we definitely don’t like but there are always people around who love to bomb us with tons of HTML.</p>
<p>How can we handle this sh^H^H ehm.. this kind of emails with beloved Gnus?</p>
<p><em>w3m</em> is the answer. It’s an external html viewer which Emacs can nicely integrate with using w3m package. Here is detailed description.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;load-path</span> <span class="s">&#34;/usr/share/emacs/site-lisp/w3m&#34;</span><span class="p">)</span>
<span class="p">(</span><span class="k">setq</span>
  <span class="nv">mm-text-html-renderer</span> <span class="ss">&#39;w3m</span>
  <span class="nv">w3m-display-inline-image</span> <span class="no">t</span><span class="p">)</span>
</code></pre></div><p>Using <code>mm-text-html-renderer</code> we point at w3m as preferred web browser which is responsible for converting and formating HTML to something that Emacs is able to digest.</p>
<p>This is end of the Gnus story, but as you probably noticed it’s only the humble introduction of that beast. I hope it encouraged you to further researches.</p>
]]></content>
        </item>
        
        <item>
            <title>Get notified</title>
            <link>https://blog.bitside.pl/posts/get-notified/</link>
            <pubDate>Wed, 04 Jan 2012 17:38:00 +0100</pubDate>
            
            <guid>https://blog.bitside.pl/posts/get-notified/</guid>
            <description>org-mode is definitely one of the most versatile notes &amp;amp; planning tools I have ever seen. It’s also number one in my daily GTD practices.
Recently, I discovered one tiny feature which makes my work with org-mode even sweeter - notifications. Suppose you have just planned a super-duper important meeting with your girlfriend. As natural born programmer, you have already created entry in you org-mode planner.
Unfortunately, org-mode by default will not warn you about upcoming event.</description>
            <content type="html"><![CDATA[<p><a href="http://orgmode.org/">org-mode</a> is definitely one of the most versatile notes &amp; planning tools I have ever seen. It’s also number one in my daily GTD practices.</p>
<p>Recently, I discovered one tiny feature which makes my work with org-mode even sweeter - notifications. Suppose you have just planned a super-duper important meeting with your girlfriend. As natural born programmer, you have already created entry in you org-mode planner.</p>
<p>Unfortunately, org-mode by default will not warn you about upcoming event. It’s very easy to overlook it, especially when you are deep in your matrix trying to decrypt one more perl script…</p>
<p>But don’t despair. Notifications come to the rescue - few minutes before meeting you will get a growl/growl-like message (possibly with shocking biiing-booong sound) reminding you about your crucial appointment.</p>
<p>To make it working on windows, I used ToDoChiKu along with Snarl which displays fancy growl-like messages. The dark side of this solution is that ToDoChiKu is no longer compatible with Snarl 2.5. You will see no messages without a simple todochiku.el patch.</p>
<p>Having ToDoChiKu patched we need to register emacs app to get notifications. Go into <code>C:\Program Files\full phat\Snarl\tools</code> where you should find a heysnarl.exe. Next, type in console:</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">heysnarl.exe “register?app-sig=app/emacs&amp;title=Emacs Org-Mode&amp;icon=C:\Program Files\full phat\Snarl\etc\icons\emacs.png”
</code></pre><p>app/emacs is our application signature used by ToDoChiku, and icon is a path to whatever icon you want. I used this one. Once emacs is installed, you should see it on the list of registered Snarl applications. You may also test if messages appear correctly:</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">heysnarl.exe “notify?app-sig=app/emacs&amp;title=Simple test&amp;text=dupa”
</code></pre><p>Oki, we have Snarl working, let’s go back to Emacs. To complete our ToDoChiku configuration we need following stuff, a bit of magic to ask org-mode to use ToDoChiku as notification tool:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">setq</span>
  <span class="nv">todochiku-command</span> <span class="s">&#34;C:/Program Files/full phat/Snarl/tools/heysnarl.exe&#34;</span>
  <span class="nv">org-show-notification-handler</span> <span class="o">&#39;</span><span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">notification</span><span class="p">)</span>
                                   <span class="p">(</span><span class="nv">todochiku-message</span> <span class="s">&#34;org-mode notification&#34;</span> <span class="nv">notification</span> <span class="p">(</span><span class="nv">todochiku-icon</span> <span class="ss">&#39;emacs</span><span class="p">))))</span>

<span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;todochiku</span><span class="p">)</span>
</code></pre></div><p>Note that requiring ‘todochiku should be placed after setting up the todochiku-command. Otherwise you will get a “respawn process” error while starting up your emacs next time.</p>
<p>Assuming todochiku is working correctly (you may verify that, eg. by evaluating in your <em>scratch</em> buffer something like <code>(todochiku-message &quot;Simple test&quot; &quot;dupa&quot; nil))</code> we finally need to enable appointments:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">setq</span>
  <span class="nv">appt-activate</span> <span class="mi">1</span>
  <span class="nv">appt-message-warning-time</span> <span class="mi">15</span>
  <span class="nv">appt-display-mode-line</span> <span class="no">t</span>
  <span class="nv">appt-display-format</span> <span class="ss">&#39;window</span><span class="p">)</span>
</code></pre></div><p>With above settings appointments will be displayed in two modes: in your mode-line and in separate popup. ToDoChiku by default overrides appt-disp-window-function redirecting all messages to Snarl process, so we don’t need to do that by ourselves.</p>
<p>Ok, time for final test. Create an appointment in your org-mode and wait…</p>
<figure><img src="/images/get_notified_2.png"/>
</figure>

]]></content>
        </item>
        
        <item>
            <title>World of Bookmarks</title>
            <link>https://blog.bitside.pl/posts/world-of-bookmarks/</link>
            <pubDate>Mon, 02 Jan 2012 10:20:00 +0100</pubDate>
            
            <guid>https://blog.bitside.pl/posts/world-of-bookmarks/</guid>
            <description>Vanilla Emacs bookmarks are for lhamas. Real octopodes use bookmark+ which enhances well known bookmarking in the way you didn’t even imagine. As the wiki page states:
 Richer bookmarks. They record more. They are more accurate.
 A few things we get here for free:
 Bookmarks tagging. Yup! just like in delicious. you may use tags eg. for sorting and filtering. Usage ‘statistics’. you may sort and filter your bookmarks basing on how often they were used.</description>
            <content type="html"><![CDATA[<p>Vanilla Emacs bookmarks are for lhamas. Real octopodes use bookmark+ which enhances well known bookmarking in the way you didn’t even imagine. As the wiki page states:</p>
<blockquote>
<p>Richer bookmarks. They record more. They are more accurate.</p>
</blockquote>
<p>A few things we get here for free:</p>
<ul>
<li>Bookmarks tagging. Yup! just like in delicious. you may use tags eg. for sorting and filtering.</li>
<li>Usage ‘statistics’. you may sort and filter your bookmarks basing on how often they were used.</li>
<li>Function / sequence / variable-list bookmarking. Sounds odd, but you may bookmark (and invoke later) a simple function or save/restore value of particular variable. If you feel it’s too primitive for your needs, you may also combine all kind of bookmarks into sequence restored (evaluated) simply by selecting such a sequence-bookmark.</li>
<li>A bit more useful thing is bookmarking a region. Region gets activated each time you select corresponding bookmark.</li>
<li>According to the documentation bookmarks+ are better relocated, which means they track the point they are assigned to in a smarter way.</li>
</ul>
<p>Coming back to bookmark types. Beside the function, sequence and variable-list bookmarks mentioned before, bookmark+ is happy to introduce a few more types:</p>
<ol>
<li>Dired bookmarks - dired buffers get restored immedately as they were bookmarked. That’s especially useful when used with tramp-mode.</li>
<li>Bookmark-list bookmarks - saves and restores the state of bookmarks list :) Once again, sounds weird but it’s might be helpful when you carefully adjust your bookmarks list by setting up filters or the way it’s sorted and you want to restore exactly the same list later.</li>
<li>Desktop bookmarks - these ones I find really useful. They allow me switching between projects in a second.</li>
<li>Gnus bookmarks - if you use Gnus, it’s something for you. And who doesn’t use Gnus after all?</li>
</ol>
<p>Now, let’s leave the marketing buzz and focus on everyday usage.</p>
<p>There are at least 2 things which I think make it worth switching to bookmark+.</p>
<p>The first one is, as mentioned, ability to bookmark the current session of your emacs, so called desktop. Having more than one active project it’s crucial to switch between them in rational way. By switching I mean restoring the last remembered desktop of project I want to ‘visit’.</p>
<p>To make desktops working you have to enable them first (described here: <a href="http://www.emacswiki.org/emacs/DeskTop">http://www.emacswiki.org/emacs/DeskTop</a>).</p>
<p>Next, enable bookmark+ (link at the top) and, with 4 fingers crossed, type <code>C-x p K</code> and point the file where your desktop will be saved. If you want to restore your desktop, display list of bookmarks: <code>C-x r l</code> and select previously created bookmark.</p>
<p>To make things a bit more convenient I usually prefix my ‘desktop-bookmarks’ with (desktop) (eg. (desktop) my-secret-project) and sort bookmarks alphabetically. To make things even more convenient I use anything (surprise!):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&#34;C-c b&#34;</span><span class="p">)</span> <span class="ss">&#39;anything-c-pp-bookmarks</span><span class="p">)</span>
</code></pre></div><p>There is also second feature which makes bookmark+ attractive alternative for vanilla bookmarks. It’s something called Autonamed bookmarks.</p>
<p>What it is used for?</p>
<p>Quite often I need to create a temporary bookmark to remember the line of code I’m just working on and I immediately jump into different place to modify some other parameter/variable/whatever. I don’t want to keep this bookmark forever so inventing a name is just a waste of time. Instead of creating a plain bookmark, I create a ‘autonamed’ one (<code>C-x p RET</code>) which means that Emacs takes care of inventing the bookmark name for me. Moreover, having the highlighting configured as <code>'(bmkp-auto-light-when-set (quote autonamed-bookmark))</code> I have visually marked all autonamed bookmark created so far.</p>
<p>As autonamed bookmarks bacame part of my life, I wanted to jump between them in fastest possible way. This is why I reused meta-shift up and down keys:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">global-set-key</span> <span class="nv">[</span><span class="p">(</span><span class="nv">M-S-down</span><span class="p">)</span><span class="nv">]</span> <span class="ss">&#39;bmkp-next-bookmark-this-file</span><span class="p">)</span>
<span class="p">(</span><span class="nv">global-set-key</span> <span class="nv">[</span><span class="p">(</span><span class="nv">M-S-up</span><span class="p">)</span><span class="nv">]</span>   <span class="ss">&#39;bmkp-previous-bookmark-this-file</span><span class="p">)</span>
</code></pre></div><p>This post covers only the top of bookmark+ iceberg. I highly recommend reading the emacs wiki and going deeper into secret world of bookmarks :)</p>
]]></content>
        </item>
        
        <item>
            <title>Interactive search rediscovered</title>
            <link>https://blog.bitside.pl/posts/interactive-search-rediscovered/</link>
            <pubDate>Fri, 16 Dec 2011 22:10:00 +0100</pubDate>
            
            <guid>https://blog.bitside.pl/posts/interactive-search-rediscovered/</guid>
            <description>Nice tip I found while searching interactively (C-s).
If you want to see all the occurences of what you’re just searching for, press M-s o and you will see new buffer listing all the desired occurences. Moreover, you may extend searching convieniently by selecting next words with C-w.
This flow C-s C-w C-w M-s o selects 2 words starting at current cursor position and lists all their occurences in current buffer.</description>
            <content type="html"><![CDATA[<p>Nice tip I found while searching interactively (<code>C-s</code>).</p>
<p>If you want to see all the occurences of what you’re just searching for, press <code>M-s o</code> and you will see new buffer listing all the desired occurences. Moreover, you may extend searching convieniently by selecting next words with <code>C-w</code>.</p>
<p>This flow <code>C-s C-w C-w M-s o</code> selects 2 words starting at current cursor position and lists all their occurences in current buffer.</p>
<p>Obviously, the greatest way to simplify all above is hidden under the ‘anything’ hood. Try anything-occur and hear your jaw dropping :)</p>
]]></content>
        </item>
        
        <item>
            <title>The Kill Ring</title>
            <link>https://blog.bitside.pl/posts/the-kill-ring/</link>
            <pubDate>Fri, 16 Dec 2011 17:20:00 +0100</pubDate>
            
            <guid>https://blog.bitside.pl/posts/the-kill-ring/</guid>
            <description>Sounds scary, but it’s not about killing (this time). Kill ring is a term used in Emacs to describe a list of cut (killed) blocks of text. Yes, that’s right. It’s about mutliple blocks of text that you can cut and paste. Emacs as an extraoridinary editor gives you ability to keep the history of what you have just killed. Be sure to close it before you start doing nasty things :)</description>
            <content type="html"><![CDATA[<p>Sounds scary, but it’s not about killing (this time). Kill ring is a term used in Emacs to describe a list of cut (killed) blocks of text. Yes, that’s right. It’s about mutliple blocks of text that you can cut and paste. Emacs as an extraoridinary editor gives you ability to keep the history of what you have just killed. Be sure to close it before you start doing nasty things :)</p>
<p>Ok, so how to use our all-remembe-ring? Easy, as usual you need to tranform to octopus and put your 8 hands on a keyboard:</p>
<ul>
<li>the <code>C-y</code> (yank) reinserts the text of the most recent copy/cut action</li>
<li>use <code>M-y</code> to iterate through the copy/cut history</li>
</ul>
<p>For example, you might want to copy 2 block of text and subsequently paste them somewhere into your buffer. To do this, select first block and copy it (<code>M-w</code>), do the same with second block. Next, go to place where you want to paste it, press <code>C-y</code> (for most recent copied block) or <code>C-y M-y</code> for block(s) copied earlier.</p>
<p>Sometimes iterating through history might be a bit painful, in particluar when your history grows very dynamically. In this case we would like rather to see what’s in the kill ring and more interactively decide what to paste.</p>
<p><em>browse-kill-ring.el</em> comes to rescue. put this into your load path, make it required:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;browse-kill-ring</span><span class="p">)</span>
</code></pre></div><p>and use whenever you want with <code>M-x browse-kill-ring</code>.</p>
<p>To move faster between history items, use n (for next) and p (for previous) keyboard shortcuts.</p>
<p>But that’s not the real fun. The real fun comes when you discover <a href="http://www.emacswiki.org/emacs/Anything">anything</a>. Install it along with <a href="http://www.emacswiki.org/emacs/anything-config.el">anything-config</a> and enjoy awesome <code>anything-show-kill-ring</code>.</p>
]]></content>
        </item>
        
    </channel>
</rss>
